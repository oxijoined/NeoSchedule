# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π
import os
import telebot
from dotenv import load_dotenv
from telebot.util import quick_markup
from modules.xlsx_parse import get_schedule
from modules.days import dayNames, lessonTime, dayEmojis
from pysondb import getDb
import asyncio

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ BOT_TOKEN –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ TeleBot
bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")

# –°–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ç–∞–ª–æ–≥ "chats", –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if not os.path.exists("chats"):
    os.makedirs("chats")


# Function to send the private schedule
def send_private_schedule(message: telebot.types.Message):
    groups = get_schedule().keys()
    bot.reply_to(
        message,
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:\n\n–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤ —á–∞—Ç –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –¥–ª—è —É—á–µ—Ç–∞ –∏ –≤—ã–±–æ—Ä–∞ –¥–µ–∂—É—Ä–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤",
        reply_markup=quick_markup(
            {
                f"{group}": {"callback_data": f"choose_group|{group}"}
                for group in groups
            },
            row_width=4,
        ),
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–≥–æ, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞
def is_chat_admin(chat_id):
    ids = []
    admins = bot.get_chat_administrators(chat_id=chat_id)
    for admin in admins:
        ids.append(admin.user.id)
    return ids


# –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –∏ –¥–Ω—è
def format_schedule(group, day):
    schedule_data = get_schedule()[group]
    msg = f"<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group}</b>\n\n"
    msg += f"<b>{dayNames[day]}</b>\n"
    for lesson, data in schedule_data[day].items():
        if data:
            if int(lesson) == 7:
                break
            discipline = data["discipline"]
            teacher = data["teacher"]
            room = data["room"]
            msg += f"<pre>\t\t{dayEmojis[int(lesson)]}: {discipline}\n\t\t\t\t\t\t\t{room}\n\t\t\t\t\t\t\t{lessonTime[int(lesson)] if teacher != ' ' else ''}</pre>\n\n\n"
    return msg


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–ª–±–µ–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è
@bot.callback_query_handler(func=lambda call: call.data.split("|")[0] == "choose_day")
def choose_day(call: telebot.types.CallbackQuery):
    day = int(call.data.split("|")[1])
    group = call.data.split("|")[2]
    markup = days_markup(group, day)
    msg = format_schedule(group, int(day))
    try:
        bot.edit_message_text(
            msg, call.from_user.id, call.message.id, reply_markup=markup
        )
        bot.answer_callback_query(call.id, text=f"{group} | {dayNames[day]}")
    except telebot.apihelper.ApiTelegramException:
        bot.answer_callback_query(call.id, text=f"–ù–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –Ω–æ–≤—ã–π —á–∞—Ç
@bot.message_handler(content_types=["new_chat_members"])
def added_to_chat(message: telebot.types.Message):
    bot_id = bot.get_me().id
    for user in message.new_chat_members:
        if user.id == bot_id:
            return chat_processer(message)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø—ã
@bot.callback_query_handler(func=lambda call: call.data.split("|")[0] == "back")
def back_handler(call: telebot.types.CallbackQuery):
    groups = get_schedule().keys()
    bot.edit_message_text(
        text="–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:",
        chat_id=call.from_user.id,
        message_id=call.message.id,
        reply_markup=quick_markup(
            {
                f"{group}": {"callback_data": f"choose_group|{group}"}
                for group in groups
            },
            row_width=4,
        ),
    )
    bot.answer_callback_query(call.id, text=f"‚óÄÔ∏è –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –æ–±—Ä–∞—Ç–Ω–æ")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–ª–±–µ–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
@bot.callback_query_handler(func=lambda call: call.data.split("|")[0] == "choose_group")
def change_group(call: telebot.types.CallbackQuery):
    group = call.data.split("|")[1]
    day = 0
    markup = days_markup(group, day)
    msg = format_schedule(group, 0)
    bot.edit_message_text(
        text=msg,
        chat_id=call.from_user.id,
        message_id=call.message.id,
        reply_markup=markup,
    )
    bot.answer_callback_query(call.id, text=f"{group}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ç–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
def days_markup(group, day):
    return quick_markup(
        {
            "‚úÖ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"
            if day == 0
            else "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": {"callback_data": f"choose_day|0|{group}"},
            "‚úÖ –í—Ç–æ—Ä–Ω–∏–∫"
            if day == 1
            else "–í—Ç–æ—Ä–Ω–∏–∫": {"callback_data": f"choose_day|1|{group}"},
            "‚úÖ –°—Ä–µ–¥–∞"
            if day == 2
            else "–°—Ä–µ–¥–∞": {"callback_data": f"choose_day|2|{group}"},
            "‚úÖ –ß–µ—Ç–≤–µ—Ä–≥"
            if day == 3
            else "–ß–µ—Ç–≤–µ—Ä–≥": {"callback_data": f"choose_day|3|{group}"},
            "‚úÖ –ü—è—Ç–Ω–∏—Ü–∞"
            if day == 4
            else "–ü—è—Ç–Ω–∏—Ü–∞": {"callback_data": f"choose_day|4|{group}"},
            "‚óÄÔ∏è": {"callback_data": f"back"},
        },
        row_width=5,
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –¥–µ–∂—É—Ä—Å—Ç–≤ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def update_order(database):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    students = database.getAll()

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—è–º
    sorted_students = sorted(students, key=lambda x: x["duties"])

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ 'order' –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
    for i, student in enumerate(sorted_students):
        database.updateById(student["id"], {"order": i + 1})


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π
def find_min_duties_students(group, chat_db):
    update_order(chat_db)
    data = chat_db.getAll()
    if group == 0:
        students_list = data
    else:
        students_list = [student for student in data if student["group"] == group]

    sorted_students = sorted(students_list, key=lambda student: student["duties"])
    return sorted_students[:2]


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ –∫–æ–ª–ª–±—ç–∫
@bot.callback_query_handler(func=lambda call: call.data.split("|")[0] == "student_set")
def student_set(call: telebot.types.CallbackQuery):
    if call.from_user.id not in is_chat_admin(call.message.chat.id):
        return bot.answer_callback_query(call.id, "–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üòÑ")
    student_id = call.data.split("|")[1]
    group = call.data.split("|")[2]
    chat_db = getDb(f"chats/{call.message.chat.id}.json")
    chat_db.updateByQuery(
        {"id": int(student_id)}, {"id": int(student_id), "group": int(group)}
    )
    markup = quick_markup(
        {
            "‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ": {"callback_data": "add_new"},
            "‚óÄÔ∏è –ù–∞–∑–∞–¥": {"callback_data": "edit"},
        },
        row_width=1,
    )
    return edit(call)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –∫–æ–ª–ª–±—ç–∫
@bot.callback_query_handler(func=lambda call: call.data.split("|")[0] == "add_new")
def add_new(call: telebot.types.CallbackQuery):
    if call.from_user.id not in is_chat_admin(call.message.chat.id):
        return bot.answer_callback_query(call.id, "–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üòÑ")
    chat_db = getDb(f"chats/{call.message.chat.id}.json")

    def process_name(message: telebot.types.Message):
        name = message.text
        id = chat_db.add({"name": name, "order": 0, "group": None, "duties": 0})
        markup = quick_markup(
            {
                "1": {"callback_data": f"student_set|{id}|1"},
                "2": {"callback_data": f"student_set|{id}|2"},
            }
        )
        bot.reply_to(
            message,
            f"–°—Ç—É–¥–µ–Ω—Ç {name} –¥–æ–±–∞–≤–ª–µ–Ω, –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ –≥—Ä—É–ø–ø—É",
            reply_markup=markup,
        )

    name_msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —Å—Ç—É–¥–µ–Ω—Ç–∞")
    bot.register_next_step_handler(name_msg, process_name)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º
def is_integer(s):
    if s.startswith("-"):
        return s[1:].isdigit()
    else:
        return s.isdigit()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–ª–∞ –¥–µ–∂—É—Ä—Å—Ç–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –∫–æ–ª–ª–±—ç–∫
@bot.callback_query_handler(func=lambda call: call.data.split("|")[0] == "edit_duties")
def edit_duties(call: telebot.types.CallbackQuery):
    if call.from_user.id not in is_chat_admin(call.message.chat.id):
        return bot.answer_callback_query(call.id, "–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üòÑ")
    chat_db = getDb(f"chats/{call.message.chat.id}.json")
    student_id = int(call.data.split("|")[1])

    def change_duties_count(message: telebot.types.Message):
        if not is_integer(message.text):
            return bot.reply_to(message, "–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ")

        new_count = int(message.text)

        chat_db.updateById(student_id, {"duties": new_count})
        return edit(call)

    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –¥–µ–∂—É—Ä—Å—Ç–≤ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞")

    bot.register_next_step_handler(msg, change_duties_count)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –∫–æ–ª–ª–±—ç–∫
@bot.callback_query_handler(
    func=lambda call: call.data.split("|")[0] == "delete_student"
)
def delete_student(call: telebot.types.CallbackQuery):
    if call.from_user.id not in is_chat_admin(call.message.chat.id):
        return bot.answer_callback_query(call.id, "–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üòÑ")
    chat_db = getDb(f"chats/{call.message.chat.id}.json")
    student_id = int(call.data.split("|")[1])

    chat_db.deleteById(student_id)
    return edit(call)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –∫–æ–ª–ª–±—ç–∫
@bot.callback_query_handler(func=lambda call: call.data.split("|")[0] == "edit_name")
def edit_duties(call: telebot.types.CallbackQuery):
    if call.from_user.id not in is_chat_admin(call.message.chat.id):
        return bot.answer_callback_query(call.id, "–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üòÑ")
    chat_db = getDb(f"chats/{call.message.chat.id}.json")
    student_id = int(call.data.split("|")[1])

    def change_name(message: telebot.types.Message):
        new_name = message.text

        chat_db.updateById(student_id, {"name": new_name})
        return edit(call)

    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞")

    bot.register_next_step_handler(msg, change_name)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã —Å—Ç—É–¥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –∫–æ–ª–ª–±—ç–∫
@bot.callback_query_handler(func=lambda call: call.data.split("|")[0] == "set_group")
def set_group(call: telebot.types.CallbackQuery):
    if call.from_user.id not in is_chat_admin(call.message.chat.id):
        return bot.answer_callback_query(call.id, "–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üòÑ")
    chat_db = getDb(f"chats/{call.message.chat.id}.json")
    group = int(call.data.split("|")[2])
    student_id = int(call.data.split("|")[1])
    chat_db.updateById(student_id, {"group": group})
    return edit(call)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã —Å—Ç—É–¥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –∫–æ–ª–ª–±—ç–∫
@bot.callback_query_handler(func=lambda call: call.data.split("|")[0] == "edit_group")
def edit_group(call: telebot.types.CallbackQuery):
    if call.from_user.id not in is_chat_admin(call.message.chat.id):
        return bot.answer_callback_query(call.id, "–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üòÑ")
    chat_db = getDb(f"chats/{call.message.chat.id}.json")
    student_id = int(call.data.split("|")[1])
    markup = quick_markup(
        {
            "1": {"callback_data": f"set_group|{student_id}|1"},
            "2": {"callback_data": f"set_group|{student_id}|2"},
        }
    )
    bot.send_message(
        call.message.chat.id,
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É —Å—Ç—É–¥–µ–Ω—Ç–∞ {chat_db.getById(student_id)['name']}",
        reply_markup=markup,
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∫–æ–ª–ª–±—ç–∫
@bot.callback_query_handler(func=lambda call: call.data.split("|")[0] == "edit")
def edit(call: telebot.types.CallbackQuery):
    if call.from_user.id not in is_chat_admin(call.message.chat.id):
        return bot.answer_callback_query(call.id, "–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üòÑ")
    chat_db = getDb(f"chats/{call.message.chat.id}.json")
    markup = quick_markup({"‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞": {"callback_data": "add_new"}})
    if chat_db.getAll() == []:
        bot.edit_message_text(
            "–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø—É—Å—Ç",
            call.message.chat.id,
            call.message.id,
            reply_markup=markup,
        )
    else:
        markup = telebot.types.InlineKeyboardMarkup()
        markup.row_width = 4
        markup.add(
            telebot.types.InlineKeyboardButton("–ò–º—è", callback_data="NONE"),
            telebot.types.InlineKeyboardButton("–ì—Ä—É–ø–ø–∞", callback_data="NONE"),
            telebot.types.InlineKeyboardButton("–î–µ–∂—É—Ä—Å—Ç–≤–∞", callback_data="NONE"),
            telebot.types.InlineKeyboardButton("–£–¥–∞–ª–µ–Ω–∏–µ", callback_data="NONE"),
        )
        for student in chat_db.getAll():
            markup.add(
                telebot.types.InlineKeyboardButton(
                    student["name"], callback_data=f"edit_name|{student['id']}"
                ),
                telebot.types.InlineKeyboardButton(
                    f'{student["group"]}', callback_data=f"edit_group|{student['id']}"
                ),
                telebot.types.InlineKeyboardButton(
                    f'{student["duties"]}', callback_data=f"edit_duties|{student['id']}"
                ),
                telebot.types.InlineKeyboardButton(
                    "‚ùå", callback_data=f"delete_student|{student['id']}"
                ),
            )
        markup.add(
            telebot.types.InlineKeyboardButton(
                "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞", callback_data="add_new"
            )
        )
        bot.edit_message_text(
            "–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:",
            call.message.chat.id,
            call.message.id,
            reply_markup=markup,
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–∂—É—Ä–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∫–æ–ª–ª–±—ç–∫
@bot.callback_query_handler(func=lambda call: call.data.split("|")[0] == "choose")
def choose(call: telebot.types.CallbackQuery):
    if call.from_user.id not in is_chat_admin(call.message.chat.id):
        return bot.answer_callback_query(call.id, "–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üòÑ")
    chat_db = getDb(f"chats/{call.message.chat.id}.json")
    group = int(call.data.split("|")[1])

    if chat_db.getAll() == []:
        bot.answer_callback_query(
            call.id,
            text="üôÖ‚Äç‚ôÇÔ∏è –°–Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤",
            show_alert=True,
        )
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã —É –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –±—ã–ª–∞ —É–∫–∞–∑–∞–Ω–∞ –≥—Ä—É–ø–ø–∞
        for student in chat_db.getAll():
            if student["group"] is None:
                return bot.send_message(
                    call.message.chat.id,
                    f"–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞ {student['name']} –≥—Ä—É–ø–ø—É",
                )

        # –ù–∞—Ö–æ–¥–∏–º –¥–≤—É—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º –¥–µ–∂—É—Ä—Å—Ç–≤
        students = find_min_duties_students(group, chat_db)
        chosen = students[:2]
        first, second = chosen[0], chosen[1]

        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(
            telebot.types.InlineKeyboardButton(
                text=f"{first['name']} | {first['duties']}",
                callback_data=f"success|{first['id']}",
            ),
            telebot.types.InlineKeyboardButton(
                text=f"{second['name']} | {second['duties']}",
                callback_data=f"success|{second['id']}",
            ),
        )
        markup.add(
            telebot.types.InlineKeyboardButton(
                text="‚ôªÔ∏è",
                callback_data=f"reroll|{first['id']}|{second['id']}|0|{group}",
            ),
            telebot.types.InlineKeyboardButton(
                text="‚ôªÔ∏è",
                callback_data=f"reroll|{first['id']}|{second['id']}|1|{group}",
            ),
        )
        bot.edit_message_text(
            f"{first['name']} | {second['name']}",
            call.message.chat.id,
            call.message.id,
            reply_markup=markup,
        )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–µ–∂—É—Ä–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
def get_new_students(database, list_of_students, index_to_replace, group):
    data = database.getAll()

    if group != 0:
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ
        data = [student for student in data if student["group"] == group]
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é 'order'
        sorted_students = sorted(data, key=lambda student: student["order"])
    else:
        # –ï—Å–ª–∏ group —Ä–∞–≤–µ–Ω 0, —Ä–∞–±–æ—Ç–∞–µ–º —Å–æ –≤—Å–µ–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏
        sorted_students = sorted(data, key=lambda student: student["order"])

    id_for_replace = list_of_students[index_to_replace]
    second_student_id = (
        list_of_students[1] if index_to_replace == 0 else list_of_students[0]
    )
    student_for_replace = database.getById(id_for_replace)
    second_student = database.getById(second_student_id)
    current_index = sorted_students.index(student_for_replace)

    if current_index == len(sorted_students) - 1:
        new_duty_student = sorted_students[0]
    else:
        new_duty_student = sorted_students[current_index + 1]

    other_duty_student_id = list_of_students[1 - index_to_replace]
    while new_duty_student["id"] == other_duty_student_id:
        current_index = next(
            (
                index
                for index, student in enumerate(sorted_students)
                if student["id"] == new_duty_student["id"]
            ),
            None,
        )
        if current_index is None or current_index == len(sorted_students) - 1:
            new_duty_student = sorted_students[0]
        else:
            new_duty_student = sorted_students[current_index + 1]

        other_duty_student_id = list_of_students[1 - index_to_replace]

    # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä–æ–≥–æ –¥–µ–∂—É—Ä–Ω–æ–≥–æ –Ω–æ–≤—ã–º
    list_of_students[index_to_replace] = new_duty_student["id"]

    return list_of_students


@bot.callback_query_handler(func=lambda call: call.data.split("|")[0] == "success")
def success(call: telebot.types.CallbackQuery):
    if call.from_user.id not in is_chat_admin(call.message.chat.id):
        return bot.answer_callback_query(call.id, "–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üòÑ")

    id_ = int(call.data.split("|")[1])
    chat_db = getDb(f"chats/{call.message.chat.id}.json")

    student = chat_db.getById(id_)

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–∂—É—Ä—Å—Ç–≤ —É —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–∞ 1
    chat_db.updateById(id_, {"duties": student["duties"] + 1})

    bot.send_message(
        call.message.chat.id,
        f"–°—Ç—É–¥–µ–Ω—Ç {student['name']} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–µ–∂—É—Ä–∏–ª, –µ–≥–æ –∫–æ–ª-–≤–æ –¥–µ–∂—É—Ä—Å—Ç–≤ - {student['duties']+1}",
    )
    return bot.answer_callback_query(
        call.id, f"–°—Ç—É–¥–µ–Ω—Ç {student['name']} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–µ–∂—É—Ä–∏–ª"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Ä–æ–∑—ã–≥—Ä—ã—à–∞ –¥–µ–∂—É—Ä–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
@bot.callback_query_handler(func=lambda call: call.data.split("|")[0] == "reroll")
def reroll(call: telebot.types.CallbackQuery):
    if call.from_user.id not in is_chat_admin(call.message.chat.id):
        return bot.answer_callback_query(call.id, "–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üòÑ")

    markup = telebot.types.InlineKeyboardMarkup()
    chat_db = getDb(f"chats/{call.message.chat.id}.json")
    first, second, index_to_replace, group = (
        int(call.data.split("|")[1]),
        int(call.data.split("|")[2]),
        int(call.data.split("|")[3]),
        int(call.data.split("|")[4]),
    )

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã—Ö –¥–µ–∂—É—Ä–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
    new_students = get_new_students(chat_db, [first, second], index_to_replace, group)

    first, second = chat_db.getById(new_students[0]), chat_db.getById(new_students[1])

    markup.add(
        telebot.types.InlineKeyboardButton(
            text=f"{first['name']} | {first['duties']}",
            callback_data=f"success|{first['id']}",
        ),
        telebot.types.InlineKeyboardButton(
            text=f"{second['name']} | {second['duties']}",
            callback_data=f"success|{second['id']}",
        ),
    )
    markup.add(
        telebot.types.InlineKeyboardButton(
            text="‚ôªÔ∏è", callback_data=f"reroll|{first['id']}|{second['id']}|0|{group}"
        ),
        telebot.types.InlineKeyboardButton(
            text="‚ôªÔ∏è", callback_data=f"reroll|{first['id']}|{second['id']}|1|{group}"
        ),
    )
    bot.edit_message_text(
        f"{first['name']} | {second['name']}",
        call.message.chat.id,
        call.message.id,
        reply_markup=markup,
    )


def chat_processer(message: telebot.types.Message):
    bot_id = bot.get_me().id
    isAdmin = False
    for item in bot.get_chat_administrators(message.chat.id):
        if item.user.id == bot_id:
            isAdmin = True
            break
    if isAdmin:
        chat_db = getDb(f"chats/{message.chat.id}.json")
        markup = quick_markup(
            {
                "–û–±—â–∞—è": {"callback_data": "choose|0"},
                "1 –ø–æ–¥–≥—Ä—É–ø–ø–∞": {"callback_data": "choose|1"},
                "2 –ø–æ–¥–≥—Ä—É–ø–ø–∞": {"callback_data": "choose|2"},
                "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø—É": {"callback_data": "edit"},
            }
        )
        bot.reply_to(
            message, "–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ, –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - /faq", reply_markup=markup
        )
    else:
        bot.reply_to(
            message,
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–¥–∞–π—Ç–µ –º–Ω–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∑–∞—Ç–µ–º –ø—Ä–æ–ø–∏—à–∏—Ç–µ /start",
        )


@bot.message_handler(commands=["log"])
def log(message: telebot.types.Message):
    chat_db = getDb(f"chats/{message.chat.id}.json")
    update_order(chat_db)
    data = chat_db.getAll()
    sorted_students = sorted(data, key=lambda x: x["name"])
    msg = "–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: \n"
    for student in sorted_students:
        msg += f"<pre>\t\t{student['duties']} - {student['name']}\n</pre>"
    bot.reply_to(message, msg)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=["start"])
def start_handler(message: telebot.types.Message):
    print(message.chat.type)
    if message.chat.type == "supergroup" or message.chat.type == "group":
        return chat_processer(message)
    elif message.chat.type == "private":
        return send_private_schedule(message)


bot.infinity_polling()
